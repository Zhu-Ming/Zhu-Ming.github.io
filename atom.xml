<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>A BUG|A CHANCE</title>
  <icon>https://www.gravatar.com/avatar/f63e2932402ca598fd6af3eed9f33d56</icon>
  <subtitle>ZM</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://zm163.github.io/"/>
  <updated>2020-05-04T10:51:57.603Z</updated>
  <id>http://zm163.github.io/</id>
  
  <author>
    <name>little ZM</name>
    <email>19850830198@163.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="http://zm163.github.io/2020/05/03/hello-world/"/>
    <id>http://zm163.github.io/2020/05/03/hello-world/</id>
    <published>2020-05-03T04:54:07.115Z</published>
    <updated>2020-05-04T10:51:57.603Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt;
        
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>GIT移动文件导致任务管理器找不到服务</title>
    <link href="http://zm163.github.io/2019/12/11/GIT%E7%A7%BB%E5%8A%A8%E6%96%87%E4%BB%B6%E5%AF%BC%E8%87%B4%E4%BB%BB%E5%8A%A1%E7%AE%A1%E7%90%86%E5%99%A8%E6%89%BE%E4%B8%8D%E5%88%B0%E6%9C%8D%E5%8A%A1/"/>
    <id>http://zm163.github.io/2019/12/11/GIT%E7%A7%BB%E5%8A%A8%E6%96%87%E4%BB%B6%E5%AF%BC%E8%87%B4%E4%BB%BB%E5%8A%A1%E7%AE%A1%E7%90%86%E5%99%A8%E6%89%BE%E4%B8%8D%E5%88%B0%E6%9C%8D%E5%8A%A1/</id>
    <published>2019-12-11T09:45:54.000Z</published>
    <updated>2020-05-04T13:15:09.777Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;移动GIT默认文件夹导致任务管理其找不到对应的服务。&lt;br&gt;1打开cmd,输入regedit&lt;/p&gt;
&lt;p&gt;2找到HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Directory&lt;br&gt;\background\shell\git_gui\comma
        
      
    
    </summary>
    
    
      <category term="Git" scheme="http://zm163.github.io/categories/Git/"/>
    
    
      <category term="Git" scheme="http://zm163.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>串</title>
    <link href="http://zm163.github.io/2019/11/21/%E4%B8%B2/"/>
    <id>http://zm163.github.io/2019/11/21/%E4%B8%B2/</id>
    <published>2019-11-21T14:21:22.000Z</published>
    <updated>2020-05-04T13:20:25.644Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;注意此处的串的实现中的模式匹配，并不是最优解法（使用KMP算法）。建议直接放入头文件。此外，但凡程序中涉及的位置皆为位序（从1开始），在某些部分，如果使用坐标作为参数，可能会产生错误，不过基本上这些错误，程序中都有所应对。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#ifndef
        
      
    
    </summary>
    
    
      <category term="数据结构" scheme="http://zm163.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="C语言" scheme="http://zm163.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/C%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="数据结构" scheme="http://zm163.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="C语言" scheme="http://zm163.github.io/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>双链表</title>
    <link href="http://zm163.github.io/2019/11/20/%E5%8F%8C%E9%93%BE%E8%A1%A8/"/>
    <id>http://zm163.github.io/2019/11/20/%E5%8F%8C%E9%93%BE%E8%A1%A8/</id>
    <published>2019-11-20T12:16:54.000Z</published>
    <updated>2020-05-04T13:20:51.721Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;在单链表的基础上添加了一个指向前面结点的指针。&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#include&amp;lt;stdlib.h&amp;gt;
#include&amp;lt;stdio.h&amp;gt;
#define ElementType char
typedef
        
      
    
    </summary>
    
    
      <category term="数据结构" scheme="http://zm163.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="C语言" scheme="http://zm163.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/C%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="数据结构" scheme="http://zm163.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="C语言" scheme="http://zm163.github.io/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>单链表</title>
    <link href="http://zm163.github.io/2019/11/20/%E5%8D%95%E9%93%BE%E8%A1%A8/"/>
    <id>http://zm163.github.io/2019/11/20/%E5%8D%95%E9%93%BE%E8%A1%A8/</id>
    <published>2019-11-20T12:16:32.000Z</published>
    <updated>2020-05-04T13:20:41.169Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;单链表：顺序表的链表实现。&lt;/p&gt;
&lt;p&gt;建议放入头文件。&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#include&amp;lt;stdio.h&amp;gt;
#include&amp;lt;stdlib.h&amp;gt;
#define ElementType
        
      
    
    </summary>
    
    
      <category term="数据结构" scheme="http://zm163.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="C语言" scheme="http://zm163.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/C%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="数据结构" scheme="http://zm163.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="C语言" scheme="http://zm163.github.io/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-28实现strStr()</title>
    <link href="http://zm163.github.io/2019/11/19/LeetCode-28%E5%AE%9E%E7%8E%B0strStr/"/>
    <id>http://zm163.github.io/2019/11/19/LeetCode-28%E5%AE%9E%E7%8E%B0strStr/</id>
    <published>2019-11-19T04:37:13.000Z</published>
    <updated>2020-05-04T13:09:54.471Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;题目：&lt;/p&gt;
&lt;p&gt;实现 strStr() 函数。&lt;/p&gt;
&lt;p&gt;给定一个 haystack 字符串和一个 needle 字符串，在 haystack 字符串中找出 needle 字符串出现的第一个位置 (从0开始)。如果不存在，则返回  -1。&lt;/p&gt;
&lt;p&gt;示例
        
      
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://zm163.github.io/categories/LeetCode/"/>
    
    
      <category term="算法" scheme="http://zm163.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Java" scheme="http://zm163.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-27移除元素</title>
    <link href="http://zm163.github.io/2019/11/18/LeetCode-27%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0/"/>
    <id>http://zm163.github.io/2019/11/18/LeetCode-27%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0/</id>
    <published>2019-11-18T07:54:26.000Z</published>
    <updated>2020-05-04T13:09:49.609Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;题目：&lt;/p&gt;
&lt;p&gt;给定一个数组 nums 和一个值 val，你需要原地移除所有数值等于 val 的元素，返回移除后数组的新长度。&lt;/p&gt;
&lt;p&gt;不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1)
        
      
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://zm163.github.io/categories/LeetCode/"/>
    
    
      <category term="算法" scheme="http://zm163.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Java" scheme="http://zm163.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-26删除排序数组的重复项</title>
    <link href="http://zm163.github.io/2019/11/17/LeetCode-26%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E9%87%8D%E5%A4%8D%E9%A1%B9/"/>
    <id>http://zm163.github.io/2019/11/17/LeetCode-26%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E9%87%8D%E5%A4%8D%E9%A1%B9/</id>
    <published>2019-11-17T03:31:51.000Z</published>
    <updated>2020-05-04T13:10:01.531Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;题目：&lt;/p&gt;
&lt;p&gt;给定一个排序数组，你需要在原地删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。&lt;/p&gt;
&lt;p&gt;不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。&lt;/p&gt;
&lt;p&gt;示例
        
      
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://zm163.github.io/categories/LeetCode/"/>
    
    
      <category term="算法" scheme="http://zm163.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Java" scheme="http://zm163.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-25k个一组翻转链表</title>
    <link href="http://zm163.github.io/2019/11/16/LeetCode-25k%E4%B8%AA%E4%B8%80%E7%BB%84%E7%BF%BB%E8%BD%AC%E9%93%BE%E8%A1%A8/"/>
    <id>http://zm163.github.io/2019/11/16/LeetCode-25k%E4%B8%AA%E4%B8%80%E7%BB%84%E7%BF%BB%E8%BD%AC%E9%93%BE%E8%A1%A8/</id>
    <published>2019-11-16T07:41:35.000Z</published>
    <updated>2020-05-04T13:10:11.151Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;题目：&lt;/p&gt;
&lt;p&gt;给你一个链表，每 k 个节点一组进行翻转，请你返回翻转后的链表。&lt;/p&gt;
&lt;p&gt;k 是一个正整数，它的值小于或等于链表的长度。&lt;/p&gt;
&lt;p&gt;如果节点总数不是 k 的整数倍，那么请将最后剩余的节点保持原有顺序。&lt;/p&gt;
&lt;p&gt;示例
        
      
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://zm163.github.io/categories/LeetCode/"/>
    
    
      <category term="算法" scheme="http://zm163.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Java" scheme="http://zm163.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-24两两交换链表中的结点</title>
    <link href="http://zm163.github.io/2019/11/15/LeetCode-24%E4%B8%A4%E4%B8%A4%E4%BA%A4%E6%8D%A2%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E7%BB%93%E7%82%B9/"/>
    <id>http://zm163.github.io/2019/11/15/LeetCode-24%E4%B8%A4%E4%B8%A4%E4%BA%A4%E6%8D%A2%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E7%BB%93%E7%82%B9/</id>
    <published>2019-11-15T00:54:41.000Z</published>
    <updated>2020-05-04T13:10:25.305Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;题目：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;给定一个链表，两两交换其中相邻的节点，并返回交换后的链表。

你不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。
示例:

给定 1-&amp;gt;2-&amp;gt;3-&amp;gt;4, 你应该返回
        
      
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://zm163.github.io/categories/LeetCode/"/>
    
    
      <category term="算法" scheme="http://zm163.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Java" scheme="http://zm163.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-23合并多个链表</title>
    <link href="http://zm163.github.io/2019/11/14/LeetCode-23%E5%90%88%E5%B9%B6%E5%A4%9A%E4%B8%AA%E9%93%BE%E8%A1%A8/"/>
    <id>http://zm163.github.io/2019/11/14/LeetCode-23%E5%90%88%E5%B9%B6%E5%A4%9A%E4%B8%AA%E9%93%BE%E8%A1%A8/</id>
    <published>2019-11-14T14:28:18.000Z</published>
    <updated>2020-05-04T13:10:33.914Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;题目：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;合并 k 个排序链表，返回合并后的排序链表。请分析和描述算法的复杂度。
示例:
输入: [   1-&amp;gt;4-&amp;gt;5,   1-&amp;gt;3-&amp;gt;4,   2-&amp;gt;6 ] 输出:
        
      
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://zm163.github.io/categories/LeetCode/"/>
    
    
      <category term="算法" scheme="http://zm163.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Java" scheme="http://zm163.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-22括号生成</title>
    <link href="http://zm163.github.io/2019/11/13/LeetCode-22%E6%8B%AC%E5%8F%B7%E7%94%9F%E6%88%90/"/>
    <id>http://zm163.github.io/2019/11/13/LeetCode-22%E6%8B%AC%E5%8F%B7%E7%94%9F%E6%88%90/</id>
    <published>2019-11-13T05:50:29.000Z</published>
    <updated>2020-05-04T13:10:42.321Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;题目：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;给出 n 代表生成括号的对数，请你写出一个函数，使其能够生成所有可能的并且有效的括号组合。

例如，给出 n = 3，生成结果为：

[
  &amp;quot;((()))&amp;quot;,
  &amp;quot;(()())&amp;quot;,
 
        
      
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://zm163.github.io/categories/LeetCode/"/>
    
    
      <category term="算法" scheme="http://zm163.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Java" scheme="http://zm163.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-21合并两个有序链表</title>
    <link href="http://zm163.github.io/2019/11/12/LeetCode-21%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8/"/>
    <id>http://zm163.github.io/2019/11/12/LeetCode-21%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8/</id>
    <published>2019-11-12T13:09:38.000Z</published>
    <updated>2020-05-04T13:10:49.967Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;题目：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;将两个有序链表合并为一个新的有序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 

示例：

输入：1-&amp;gt;2-&amp;gt;4,
        
      
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://zm163.github.io/categories/LeetCode/"/>
    
    
      <category term="算法" scheme="http://zm163.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Java" scheme="http://zm163.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-20有效的括号</title>
    <link href="http://zm163.github.io/2019/11/11/LeetCode-20%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7/"/>
    <id>http://zm163.github.io/2019/11/11/LeetCode-20%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7/</id>
    <published>2019-11-11T15:23:33.000Z</published>
    <updated>2020-05-04T13:10:57.397Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;题目：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;给定一个只包括 &amp;apos;(&amp;apos;，&amp;apos;)&amp;apos;，&amp;apos;{&amp;apos;，&amp;apos;}&amp;apos;，&amp;apos;[&amp;apos;，&amp;apos;]&amp;apos;
        
      
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://zm163.github.io/categories/LeetCode/"/>
    
    
      <category term="算法" scheme="http://zm163.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Java" scheme="http://zm163.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-19删除链表倒数第N个节点</title>
    <link href="http://zm163.github.io/2019/11/10/LeetCode-19%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E5%80%92%E6%95%B0%E7%AC%ACN%E4%B8%AA%E8%8A%82%E7%82%B9/"/>
    <id>http://zm163.github.io/2019/11/10/LeetCode-19%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E5%80%92%E6%95%B0%E7%AC%ACN%E4%B8%AA%E8%8A%82%E7%82%B9/</id>
    <published>2019-11-10T11:05:13.000Z</published>
    <updated>2020-05-04T13:11:04.794Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;题目：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;给定一个链表，删除链表的倒数第 n 个节点，并且返回链表的头结点。

示例：

给定一个链表: 1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;5, 和 n = 2.

当删除了倒数第二个节点后，链表变为
        
      
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://zm163.github.io/categories/LeetCode/"/>
    
    
      <category term="算法" scheme="http://zm163.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Java" scheme="http://zm163.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-18四数之和</title>
    <link href="http://zm163.github.io/2019/11/09/LeetCode-18%E5%9B%9B%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
    <id>http://zm163.github.io/2019/11/09/LeetCode-18%E5%9B%9B%E6%95%B0%E4%B9%8B%E5%92%8C/</id>
    <published>2019-11-09T04:57:35.000Z</published>
    <updated>2020-05-04T13:11:13.194Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;题目：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;给定一个包含 n 个整数的数组 nums 和一个目标值 target，判断 nums 中是否存在四个元素 a，b，c 和 
d ，使得 a + b + c+ d 的值与 target 相等？找出所有满足条件且不重复的四元组。


        
      
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://zm163.github.io/categories/LeetCode/"/>
    
    
      <category term="算法" scheme="http://zm163.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Java" scheme="http://zm163.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-17电话号码的字母组合</title>
    <link href="http://zm163.github.io/2019/11/08/LeetCode-17%E7%94%B5%E8%AF%9D%E5%8F%B7%E7%A0%81%E7%9A%84%E5%AD%97%E6%AF%8D%E7%BB%84%E5%90%88/"/>
    <id>http://zm163.github.io/2019/11/08/LeetCode-17%E7%94%B5%E8%AF%9D%E5%8F%B7%E7%A0%81%E7%9A%84%E5%AD%97%E6%AF%8D%E7%BB%84%E5%90%88/</id>
    <published>2019-11-08T15:35:56.000Z</published>
    <updated>2020-05-04T13:11:20.697Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;题目：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;给定一个仅包含数字 2-9 的字符串，返回所有它能表示的字母组合。

给出数字到字母的映射如下（与电话按键相同）。注意 1 不对应任何字母。&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img
        
      
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://zm163.github.io/categories/LeetCode/"/>
    
    
      <category term="算法" scheme="http://zm163.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Java" scheme="http://zm163.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-16最接近的三数之和</title>
    <link href="http://zm163.github.io/2019/11/07/LeetCode-16%E6%9C%80%E6%8E%A5%E8%BF%91%E7%9A%84%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
    <id>http://zm163.github.io/2019/11/07/LeetCode-16%E6%9C%80%E6%8E%A5%E8%BF%91%E7%9A%84%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/</id>
    <published>2019-11-07T14:08:49.000Z</published>
    <updated>2020-05-04T13:11:29.058Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;题目：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;给定一个包括 n 个整数的数组 nums 和 一个目标值 target。找
出 nums 中的三个整数，使得它们的和与 target 最接近。返回这三
个数的和。假定每组输入只存在唯一答案。

例如，给定数组 nums =
        
      
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://zm163.github.io/categories/LeetCode/"/>
    
    
      <category term="算法" scheme="http://zm163.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Java" scheme="http://zm163.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-15三数之和</title>
    <link href="http://zm163.github.io/2019/11/06/LeetCode-15%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
    <id>http://zm163.github.io/2019/11/06/LeetCode-15%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/</id>
    <published>2019-11-06T11:54:29.000Z</published>
    <updated>2020-05-04T13:11:37.900Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;题目：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;给定一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？找出所有满足条件且不重复的三元组。

注意：答案中不可以包含重复的三元组。

例如, 给定数组 nums
        
      
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://zm163.github.io/categories/LeetCode/"/>
    
    
      <category term="算法" scheme="http://zm163.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Java" scheme="http://zm163.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-14最长公共前缀</title>
    <link href="http://zm163.github.io/2019/11/06/LeetCode-14%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%89%8D%E7%BC%80/"/>
    <id>http://zm163.github.io/2019/11/06/LeetCode-14%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%89%8D%E7%BC%80/</id>
    <published>2019-11-06T11:53:55.000Z</published>
    <updated>2020-05-04T13:11:45.931Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;题目：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;编写一个函数来查找字符串数组中的最长公共前缀。

如果不存在公共前缀，返回空字符串 &amp;quot;&amp;quot;。

示例 1:

输入:
        
      
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://zm163.github.io/categories/LeetCode/"/>
    
    
      <category term="算法" scheme="http://zm163.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Java" scheme="http://zm163.github.io/tags/Java/"/>
    
  </entry>
  
</feed>
